#version 430 core

///////////////////////////////////////////////////////////////////////////////////
// @author Philipp Stiegernigg
///////////////////////////////////////////////////////////////////////////////////

#include "util.shdr"

#ifdef _compute_

layout(std430, binding = 0) buffer CollapseHierarchy {
   uint collapseHierarchy[];
};

layout(std430, binding = 1) buffer HierarchyInformation {
  CollapseInformation collapseInformation[];
};

layout(std430, binding = 2) buffer CollapsePlacement {
  float collapsePlacement[];
};

layout(std430, binding = 3) buffer HighestCollapse {
  uint highestCollapse[];
};

layout(std430, binding = 4) buffer VertexPlacement {
  float vertexPlacement[];
};

uniform uint workSize;

layout(local_size_x = WORKGROUPSIZE, local_size_y = 1, local_size_z = 1) in;

void main() {

	//check work size range
  	uint index = gl_GlobalInvocationID.x;
  	if(index >= workSize) return;


	uint maxCollapses = collapseInformation[index].numCollapses;
        uint startIndex = collapseInformation[index].startPtr;
	uint collapses = 0;


        while(collapseHierarchy[startIndex + collapses] < workSize && collapses < maxCollapses) {
		++collapses;
        }

	if(index >= atomicMax(highestCollapse[collapseHierarchy[index + collapses]], index)) {
		vertexPlacement[3 * collapseHierarchy[startIndex + collapses]] = collapsePlacement[3 * collapseHierarchy[startIndex + collapses - 1]];
		vertexPlacement[3 * collapseHierarchy[startIndex + collapses] + 1] = collapsePlacement[3 * collapseHierarchy[startIndex + collapses - 1] + 1];
		vertexPlacement[3 * collapseHierarchy[startIndex + collapses] + 2] = collapsePlacement[3 * collapseHierarchy[startIndex + collapses - 1] + 2];
        }
 	
}

#endif // _compute_


