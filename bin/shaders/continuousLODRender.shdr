#version 430 core

///////////////////////////////////////////////////////////////////////////////////
//
// @author Philipp Stiegernigg
///////////////////////////////////////////////////////////////////////////////////

#include "util.shdr"

#ifdef _vertex_
layout (location = 0) in vec3 vPosition;

layout(std430, binding = 0) buffer CollapseHierarchy {
   uint collapseHierarchy[];
};

layout(std430, binding = 1) buffer VertexInformation {
  HierarchyInformation collapseInformation[];
};

layout(std430, binding = 2) buffer CollapsePlacement {
  float collapsePlacement[];
};

layout(std430, binding = 3) buffer Normals {
  float normal[];
};

out vec3 Normal;

uniform mat4 MVP;
uniform uint level;

void main()
{	
        uint start = collapseInformation[gl_VertexID].startPtr;
	uint collapse = 0;
	uint currentVertex = collapseHierarchy[start];

	while(currentVertex < level) {
		++collapse;
		currentVertex = collapseHierarchy[start + collapse]; 
	}

  	if(collapse > 0) {
		uint index = 3 * collapseHierarchy[start + collapse - 1];
		gl_Position = MVP * vec4(
		collapsePlacement[index],
		collapsePlacement[index + 1],
		collapsePlacement[index + 2], 1);
		Normal = vec3(normal[3 * currentVertex], normal[3 * currentVertex + 1], normal[3 * currentVertex + 2]);
		
  	} else {
  		gl_Position = MVP * vec4(vPosition.x, vPosition.y, vPosition.z, 1);
            	Normal = vec3(normal[3*gl_VertexID], normal[3*gl_VertexID + 1], normal[3*gl_VertexID + 2]);
  	}

}

#endif // _vertex_

#ifdef _fragment_
in vec3 Normal;

uniform vec3 vecToCamera;

vec4 LightPosition = vec4(-50.0, 10.0, 50.0, 1.0);
vec3 LightIntensity = vec3(1.0, 1.0, 1.0);
vec3 Ka = vec3(0.1, 0.1, 0.1);
vec3 Kd = vec3(0.2, 0.2, 0.2);
vec3 Ks = vec3(0.3, 0.3, 0.3);

float Shininess = 5;

layout(location = 0) out vec4 FragColor;

void main() {
	
	vec3 n = normalize(Normal);
	vec3 s = normalize(vec3(LightPosition));
	vec3 r = reflect(-s, n);

	FragColor = vec4(LightIntensity * (Ka + Kd * max(dot(s, n), 0.0) + Ks * pow(max(dot(r, vecToCamera), 0.0), Shininess)), 1.0);
}

#endif // _fragment_
